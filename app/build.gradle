apply plugin: 'com.android.application'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':corelibrary')
}

def javaVersion = JavaVersion.VERSION_1_7

def buildTime() {
    return new Date().format("yyyy_MM_dd", TimeZone.getTimeZone("UTC"))
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            try {
                storeFile file("./keystore/release.keystore")
                storePassword "testres"
                keyAlias "testres"
                keyPassword "testres"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }
    }

//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'armeabi-v7a'
//            universalApk true
//        }
//    }
    defaultConfig {
        applicationId "com.qc.hsk"
        minSdkVersion 18
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }


    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "false"
            //只针对release版本进行配置
            applicationVariants.all {
                variant ->
                    variant.outputs.each {
                        output ->
                            def outputFile = output.outputFile
                            if (outputFile != null && outputFile.name.endsWith('.apk') && 'release'.equals(variant.buildType.name)) {
                                // 输出apk格式命名如：Gradle_v1.0_2016_07_01_wandoujia.apk
                                def fileName = "Gradl_v${variant.versionName}_${buildTime()}_${variant.flavorName}.apk"
                                output.outputFile = new File(outputFile.parent, fileName)
                            }
                    }
            }
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            buildConfigField "boolean", "LOG_DEBUG", "true"
            applicationIdSuffix ".debug"

        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    productFlavors {
        wandoujia {}
        xiaomi {}
//        _360 {}
        //...
    }

    productFlavors.all {
            //批量修改，类似一个循序遍历
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
    }
}



